// <auto-generated />
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Linq;

namespace tldr_Discord
{

    public partial class TldrIndex
    {
        [JsonProperty("commands")]
        public Command[] Commands { get; set; }
    }

    public partial class Command
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("platform")]
        public Platform[] Platform { get; set; }

        [JsonProperty("language")]
        public string[] Language { get; set; }

        [JsonProperty("targets")]
        public Target[] Targets { get; set; }
    }

    public partial class Target
    {
        [JsonProperty("os")]
        public Platform Os { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }
    }


    public enum Platform { Android, Common, Linux, Osx, Sunos, Windows };

    public partial class TldrIndex
    {
        public static TldrIndex FromJson(string json) => JsonConvert.DeserializeObject<TldrIndex>(json, tldr_Discord.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TldrIndex self) => JsonConvert.SerializeObject(self, tldr_Discord.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PlatformConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }


    internal class PlatformConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Platform) || t == typeof(Platform?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "android":
                    return Platform.Android;
                case "common":
                    return Platform.Common;
                case "linux":
                    return Platform.Linux;
                case "osx":
                    return Platform.Osx;
                case "sunos":
                    return Platform.Sunos;
                case "windows":
                    return Platform.Windows;
            }
            throw new Exception("Cannot unmarshal type Platform");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Platform)untypedValue;
            switch (value)
            {
                case Platform.Android:
                    serializer.Serialize(writer, "android");
                    return;
                case Platform.Common:
                    serializer.Serialize(writer, "common");
                    return;
                case Platform.Linux:
                    serializer.Serialize(writer, "linux");
                    return;
                case Platform.Osx:
                    serializer.Serialize(writer, "osx");
                    return;
                case Platform.Sunos:
                    serializer.Serialize(writer, "sunos");
                    return;
                case Platform.Windows:
                    serializer.Serialize(writer, "windows");
                    return;
            }
            throw new Exception("Cannot marshal type Platform");
        }

        public static readonly PlatformConverter Singleton = new PlatformConverter();
    }
    
}
